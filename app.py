# -*- coding: utf-8 -*-
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State
import plotly.graph_objs as go

from data import Data


external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div(children=[
    html.H1(children='GitHub Commit Frequency Analysis'),
   html.Div(children='''
       This program creates a Fourier Transform of the commits over time data from a given repository. The resulting figure that you see below is a intensity versus frequency graph of that data. It is generated by binning 100,000 data points into intervals of 1 hour. It should be noted that this graph does not show user-specific visits, and therefore does not predict the number of programmers committing at a certain frequency. Rather, it shows us the frequency of the events that draw significantly more (or less) commits. For example, a spike at the one month frequency does not mean that there are many once-a-month committers, but instead that there is some external factor that attracts more commits each month.
       '''),
    html.Div(children='''
        Dash: A web application framework for Python.
    '''),
    dcc.Input(id='repo-in', value='thedropbears/pypowerup', type='text'),
    html.Button(id='submit-button', n_clicks=0, children='Submit'),

    dcc.Graph(
        id='fft-repo',
    )
])

data = Data()

@app.callback(
    dash.dependencies.Output('fft-repo', 'figure'),
              [Input('submit-button', 'n_clicks')],
              [State('repo-in', 'value')])
def update_repo_plot(n_clicks, repo):
    (repo_owner, repo_name) = repo.split('/')
    freq, amp = data.get_frequency(repo_owner, repo_name)
    return {
            'data': [
                {'x': freq, 'y': amp, 'type': 'line'}],
            'layout': go.Layout(
            xaxis={'type': 'log', 'title': 'Hours (between messages)'},
            yaxis={'title': 'Commit Intensity'},
            hovermode='closest')

    }

if __name__ == '__main__':
    app.run_server(debug=True)
